From b2284d70ddd54c2f1ab638acd73ec717dd0fe2f4 Mon Sep 17 00:00:00 2001
From: Kenneth Hoste <kenneth.hoste@ugent.be>
Date: Tue, 8 Feb 2022 23:09:41 +0100
Subject: [PATCH] avoid crash in get_os_version on modern SLES-based OSs (fixes
 #3952)

---
 easybuild/tools/systemtools.py | 57 ++++++++++++++--------------------
 test/framework/systemtools.py  | 22 +++++++++++++
 2 files changed, 46 insertions(+), 33 deletions(-)

diff --git a/easybuild/tools/systemtools.py b/easybuild/tools/systemtools.py
index 8214b0d8b..37411e4b8 100644
--- a/easybuild/tools/systemtools.py
+++ b/easybuild/tools/systemtools.py
@@ -742,40 +742,31 @@ def get_os_version():
                 os_version = res.group('version')
 
     if os_version:
-        if get_os_name() in ["suse", "SLES"]:
-
-            # SLES subversions can only be told apart based on kernel version,
-            # see http://wiki.novell.com/index.php/Kernel_versions
-            version_suffixes = {
-                '11': [
-                    ('2.6.27', ''),
-                    ('2.6.32', '_SP1'),
-                    ('3.0.101-63', '_SP4'),
-                    # not 100% correct, since early SP3 had 3.0.76 - 3.0.93, but close enough?
-                    ('3.0.101', '_SP3'),
-                    # SP2 kernel versions range from 3.0.13 - 3.0.101
-                    ('3.0', '_SP2'),
-                ],
-
-                '12': [
-                    ('3.12.28', ''),
-                    ('3.12.49', '_SP1'),
-                ],
-            }
-
+        # older SLES subversions can only be told apart based on kernel version,
+        # see http://wiki.novell.com/index.php/Kernel_versions
+        sles_version_suffixes = {
+            '11': [
+                ('2.6.27', ''),
+                ('2.6.32', '_SP1'),
+                ('3.0.101-63', '_SP4'),
+                # not 100% correct, since early SP3 had 3.0.76 - 3.0.93, but close enough?
+                ('3.0.101', '_SP3'),
+                # SP2 kernel versions range from 3.0.13 - 3.0.101
+                ('3.0', '_SP2'),
+            ],
+
+            '12': [
+                ('3.12.28', ''),
+                ('3.12.49', '_SP1'),
+            ],
+        }
+        if get_os_name() in ['suse', 'SLES'] and os_version in sles_version_suffixes:
             # append suitable suffix to system version
-            if os_version in version_suffixes.keys():
-                kernel_version = platform.uname()[2]
-                known_sp = False
-                for (kver, suff) in version_suffixes[os_version]:
-                    if kernel_version.startswith(kver):
-                        os_version += suff
-                        known_sp = True
-                        break
-                if not known_sp:
-                    suff = '_UNKNOWN_SP'
-            else:
-                raise EasyBuildError("Don't know how to determine subversions for SLES %s", os_version)
+            kernel_version = platform.uname()[2]
+            for (kver, suff) in sles_version_suffixes[os_version]:
+                if kernel_version.startswith(kver):
+                    os_version += suff
+                    break
 
         return os_version
     else:
diff --git a/test/framework/systemtools.py b/test/framework/systemtools.py
index fa49515ed..cbbf8f950 100644
--- a/test/framework/systemtools.py
+++ b/test/framework/systemtools.py
@@ -366,10 +366,13 @@ class SystemToolsTest(EnhancedTestCase):
         self.orig_is_readable = st.is_readable
         self.orig_read_file = st.read_file
         self.orig_run_cmd = st.run_cmd
+        self.orig_platform_dist = st.platform.dist if hasattr(st.platform, 'dist') else None
         self.orig_platform_uname = st.platform.uname
         self.orig_get_tool_version = st.get_tool_version
         self.orig_sys_version_info = st.sys.version_info
         self.orig_HAVE_ARCHSPEC = st.HAVE_ARCHSPEC
+        self.orig_HAVE_DISTRO = st.HAVE_DISTRO
+        self.orig_ETC_OS_RELEASE = st.ETC_OS_RELEASE
         if hasattr(st, 'archspec_cpu_host'):
             self.orig_archspec_cpu_host = st.archspec_cpu_host
         else:
@@ -383,10 +386,14 @@ class SystemToolsTest(EnhancedTestCase):
         st.get_os_name = self.orig_get_os_name
         st.get_os_type = self.orig_get_os_type
         st.run_cmd = self.orig_run_cmd
+        if self.orig_platform_dist is not None:
+            st.platform.dist = self.orig_platform_dist
         st.platform.uname = self.orig_platform_uname
         st.get_tool_version = self.orig_get_tool_version
         st.sys.version_info = self.orig_sys_version_info
         st.HAVE_ARCHSPEC = self.orig_HAVE_ARCHSPEC
+        st.HAVE_DISTRO = self.orig_HAVE_DISTRO
+        st.ETC_OS_RELEASE = self.orig_ETC_OS_RELEASE
         if self.orig_archspec_cpu_host is not None:
             st.archspec_cpu_host = self.orig_archspec_cpu_host
         super(SystemToolsTest, self).tearDown()
@@ -738,6 +745,21 @@ class SystemToolsTest(EnhancedTestCase):
         os_version = get_os_version()
         self.assertTrue(isinstance(os_version, string_type) or os_version == UNKNOWN)
 
+        # make sure that bug fixed in https://github.com/easybuilders/easybuild-framework/issues/3952
+        # does not surface again, by mocking what's needed to make get_os_version fall into SLES-specific path
+
+        if hasattr(st.platform, 'dist'):
+            st.platform.dist = lambda: (None, None)
+        st.HAVE_DISTRO = False
+
+        st.get_os_name = lambda: 'SLES'
+        fake_etc_os_release = os.path.join(self.test_prefix, 'os-release')
+        write_file(fake_etc_os_release, 'VERSION="15-SP1"')
+        st.ETC_OS_RELEASE = fake_etc_os_release
+
+        os_version = get_os_version()
+        self.assertEqual(os_version, '15-SP1')
+
     def test_gcc_version_native(self):
         """Test getting gcc version."""
         gcc_version = get_gcc_version()
-- 
2.31.0

